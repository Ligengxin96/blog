[ { "title": "使用SQL Server中处理JSON数据", "url": "/posts/handle-json-in-sql/", "categories": "Technology", "tags": "SQL Server, Transact-SQL", "date": "2021-02-27 00:00:00 +0800", "snippet": "  这次的任务是需要计算Azure中每个API访问的数量以及访问的方式,为了避免数据库数据冗余,所以就将source这个字段在kusto的查询中处理成了一个JSON.然后在存入到了数据库中.具体需求如下图1.具体代码 我们首先纵向展开上图的原始数据,可以得到下图的数据 SELECT t1.apiPath,t1.operation,t1.[source],t1.[sourceCount]FROM (SELECT apiPath, operation, impact.[key] as source, SUM(CAST(ISNULL(impact.[value], 0) AS BIGI..." }, { "title": "React机制分析总结", "url": "/posts/how-does-react-work/", "categories": "Learning", "tags": "React.js", "date": "2021-02-19 00:00:00 +0800", "snippet": "1.Virtual DOM  简单说下我对于 Virtual DOM的理解.顾名思义就是虚拟DOM,其实就是在内存中表示的DOM树.那如何在内存中表示DOM树呢,很简单使用一个JSON对象,通过不断在children属性中加入一个个类似的JSON对象,这样就能在内存构建出一棵虚拟的DOM树.{ tagName: &#39;div&#39;, // 标签名 properties: { // 属性 style: {} // 样式 }, children: [], // 子节点 key: 1 // 唯一标识}   再说下我对于JSX的理解,JSX其实只是语法糖,语法糖只是方便我们去写代..." }, { "title": "forEach中使用async/await", "url": "/posts/forEach-async/", "categories": "Technology", "tags": "JavaScript", "date": "2021-02-02 00:00:00 +0800", "snippet": "1.问题出现  今天在写Azure Function的时候发现了一个问题,就是为了方便定位问题,于是给下面这段代码添加了log信息// 大致是需要请求一个接口获取数据然后在把结果发送给另外一个接口let count = 0;const result = await fetchDataFromDataBase();result.forEach(async (item) =&amp;gt; { await request(item); count++;});console.log(&#39;发送次数&#39;, count);  预期结果就是想看看有没有正确的发送请求的数量.当我调试的时..." }, { "title": "使用Ant design Form组件获取Upload组件的fileList信息", "url": "/posts/antd-form-get-upload-fileLsit-info/", "categories": "Technology", "tags": "React.js, Ant Design", "date": "2021-01-19 00:00:00 +0800", "snippet": "  简述下我的业务场景,一个Modal组件中使用了Form组件,而这个Form组件又包含了一些别的组件,然后在点击Modal的确认按钮把Form表单的数据全部发送给Api.不看过程直接看代码的1.问题出现  在完成一切后,我发现点击确认按钮后并不能获取到Form组件下面Upload组件的信息,当时就想应该这个组件Api是支持的,然后看了一遍Form组件和Upload组件的发现了一个官方Demo然后肯定就直接Copy代码下来开整啊.但是发现不生效2.解决过程  咦?官方Demo都不生效,怎么回事呢.仔细研究了下代码const normFile = (e) =&amp;gt; { cons..." }, { "title": "前端使用Ant design Upload组件上传文件到阿里云OSS的坑", "url": "/posts/work-problem-Ali-OSS/", "categories": "Issue", "tags": "Ali-OSS, React.js, Ant Design", "date": "2021-01-07 00:00:00 +0800", "snippet": "  业务需求需要上传文件,那就想办法整呗,一顿操作过后选择了阿里云OSS.1.问题出现  跟着阿里云文档一步步操作过来的,但是还是出现了一个403错误&amp;lt;Error&amp;gt; &amp;lt;Code&amp;gt;SignatureDoesNotMatch&amp;lt;/Code&amp;gt; &amp;lt;Message&amp;gt;The request signature we calculated does not match the signature you provided. Check your key and signing method..." }, { "title": "我的2020年终总结", "url": "/posts/my-2020-summary/", "categories": "Summary", "tags": "Summary", "date": "2021-01-01 00:00:00 +0800", "snippet": "1.前言  今年我觉得最成功的一个决定就是4月份跳槽来了上海,跳槽的原因可以看这篇blog.因为来上海后感觉自己才真正踏入了程序世界.这份新工作让我见识了不少新东西,让去年刚毕业的,认为程序的世界只有java web的我的视野一下子扩宽了好多.当然,也怪以前自己太菜,获取信息的姿势不对,所以导致在网上找的资源大部分都是关于java web相关的.2. 学习方面  以前在学校的时候,不怎么喜欢看书.因为觉得看书学得太慢了,还是看视频学得快.跟着视频敲几下代码就能实现一些功能,但是看书的话得话很久的时间.现在看来,以前真的太浮躁,太急功近利了.现在觉得看书才是有用的学习方法.为什么呢?因为你..." }, { "title": "Azure 踩坑合集", "url": "/posts/Azure-issues/", "categories": "Issue", "tags": "Azure, Azure Function, Data Factory", "date": "2020-12-25 00:00:00 +0800", "snippet": "  记录在使用Azure过程中遇到的的一系列问题和解决办法.1.Azure Function Invalid ELF header from build/Release/nodegit.node错误信息: ‘Error: /home/site/wwwroot/node_modules/nodegit/build/Release/nodegit.node: invalid ELF header’解决办法: 不要用windows环境部署Azure Function, 可以用WSL2.Data Factory Data Factory Pipeline 调用sql server存储过程性能..." }, { "title": "深入React技术栈第2章总结", "url": "/posts/go-deep-react-chapter-2/", "categories": "Learning", "tags": "React.js", "date": "2020-11-12 00:00:00 +0800", "snippet": "  深入React技术栈第2章总结1.React 的事件机制  React有自己的事件机制，所以你在React使用事件函数比如在onClick的时候，你会发现他的写法是驼峰式命名,而原生的事件直接就是onclick.而且在常用的事件,比如onclick的回调函数中，获取的event并不是一个原生事件，打印出来是一个SyntheticEvent对象(proto: SyntheticEvent).当然如果需要使用原生事件,通过使用SyntheticEvent事件的nativeEvent属性来获取.看完这个小节后我问了自己一个问题. React为什么要封装自己的事件机制,有什么好处呢? ..." }, { "title": "JavaScript高级程序设计第4章总结", "url": "/posts/js-advanced-programming-chapter-4/", "categories": "Learning", "tags": "JavaScript", "date": "2020-10-31 00:00:00 +0800", "snippet": "  看完JavaScript高级程序设计第4章一些总结和想法1.作用域链的的理解  我们都知道函数在运行的时候,函数内部是可以访问在函数外部定义的变量的.这是因为JS中每个函数都有自己的上下文,每个函数在执行的时候,即当前上下文在执行的时候都会生成当前函数内变量对象的作用域链,而这个作用域链的next(我的理解是把作用域链当成链表,通过next属性找到下一个作用域链)指向的就是包含当前函数的上下文.JS需要解析一个变量的时候,会在当前的作用域链看看是否有这个变量,如果没有那就去访问当前作用域链的next(包含当前函数的上下文),看看是否有这个变量,找到就会停止寻找,如果找到全局上下文还没..." }, { "title": "不需要下载激活软件,免费激活office 2019", "url": "/posts/install-and-activate-office-2019/", "categories": "Tools, Tutorial", "tags": "Office 2019", "date": "2020-10-20 00:00:00 +0800", "snippet": "  在公司办公office 365用起来是真的舒服,今天在家突然发现电脑上没有,果断下载一个office 2019,本着能省则省的原则.Google了一个白嫖的方式,总结下写了一个傻瓜教程.1.下载offcie 2019使用迅雷下载office 2019, 下载链接如下ed2k://|file|cn_office_professional_plus_2019_x86_x64_dvd_5e5be643.iso|3775004672|1E4FFA5240F21F60DC027F73F1C62FF4|/2.激活使用的命令管理员运行cmd, 一定要是管理员运行cmd.按步骤运行如下命令1.进入o..." }, { "title": "一次复杂的需求的存储过程实现代码", "url": "/posts/complex-sql/", "categories": "Technology", "tags": "SQL Server, Transact-SQL", "date": "2020-09-29 00:00:00 +0800", "snippet": "  这次需求类似于需要对比某个产品的不同月份的销售数据,生成一个趋势的新字段,也就是说如果你的这个产品有4个月的数据的话,那么在这个趋势的字段里面就应该有3个值来描述4个月的趋势变化.难点应该在于如何对比并把生成趋势这个字段.具体代码WITH source AS (SELECT column1, column2, column3, column4, column5, column6, column7, a.column8, b.column9FROM table1 AS aLEFT JOIN ..." }, { "title": "常用vscode配置和git命令备忘", "url": "/posts/vscode-config-and-git-command/", "categories": "Tools, Tutorial", "tags": "VS Code", "date": "2020-08-25 00:00:00 +0800", "snippet": "  记录下需要容易忘记但又常用的vscode配置和git命令.Git 命令行撤销一次Pull 操作git revert --hard head删除分支 删除远程分支 git push origin -d &amp;lt;branchName&amp;gt; 删除本地分支 git branch -d &amp;lt;branchName&amp;gt;VScode 配置调试Jest测试框架的某个单元测试TS文件{ &quot;type&quot;: &quot;node&quot;, &quot;name&quot;: &quot;Debug Jest Test&quot;, &..." }, { "title": "初识node.js并发", "url": "/posts/first-time-node.js-concurrent/", "categories": "Technology", "tags": "Node.js, TypeScript", "date": "2020-08-03 00:00:00 +0800", "snippet": "  最近的一个任务的部分内容是需要去读取多个文件中的数据(10个文件,平均每个文件250,000行数据,一共2500,000行数据),然后将这些数据作为payload发送给一个服务器.问题出现  开始的时候还以为很简单,不就是读取文件数据然后用fetch或者axios把数据发送给服务器吗?但是当我代码写好后,发现了一个很严重的问题.因为每一次发送请求都需要1s左右,也就是说发送完全部数据需要2500,000s也就是需要大约700小时,将近一个月的时间。  这么长的时间谁能接受呢,仔细想想,问题可能出现在哪里.读取数据太慢了?不一会我就否定了这个问题,因为测试发现读取文件的速度是很快的.再..." }, { "title": "SQL Server中如何比较两个表中nullable(可空)字段", "url": "/posts/work-problem-SQL-2/", "categories": "Issue", "tags": "SQL Server, Transact-SQL", "date": "2020-07-14 00:00:00 +0800", "snippet": "  今天遇到一个问题就是在两个表连接查询的时候.连接条件是A表的a字段等于B表的a字段,同时A表的b字段等于B表的b字段.因为这个b字段可为空,所以就算a字段是相同的如果b字段都是null,这条数据也是匹配不上的.但是需求是这条数据应该是匹配上的.问题出现-- b字段可为nullselect * from A,B where A.a = B.a and A.b = B.b主要原因是因为SQL Server中 null = null 返回是UNKNOWN, 可以初略的理解为false.解决方案参考资料stackoverflow的答案-- b字段可为nullselect * from A,B..." }, { "title": "wsl使用过程中遇到的问题和解决办法", "url": "/posts/use-wsl-issue/", "categories": "Issue", "tags": "WSL, WSL2", "date": "2020-07-08 00:00:00 +0800", "snippet": "  使用wsl(Window Subsystem for linux)过程中遇到的问题和解决办法git 授权问题  今天在wsl中打开项目git pull一个在 Azure DevOps平台的repo的时候.在账号和密码输入正确的情况下竟然提示我没授权(fatal: Authentication failed for ‘仓库的url’).我的解决办法,wsl中输入如下命令后重新git pullgit config --global credential.helper &quot;/mnt/c/Program\\ Files/Git/mingw64/libexec/git-core/git-..." }, { "title": "ubuntu18.04上安装mysql", "url": "/posts/install-mysql-ubuntu/", "categories": "Tools, Tutorial", "tags": "MySQL", "date": "2020-06-29 00:00:00 +0800", "snippet": "  最近工作是写存储过程.但是又不敢在微软他们数据库中乱操作.虽然有备份,但是搞坏了总不好.刚好最近又买了服务器,那总得用起来嘛.于是网上找教程开始,但是没有一篇文章完整了记录了安装mysql(5.7版本)到ssh远程连接数据库.这又是一篇自己乱撞踩坑的记录.卸载mysql  为什么首先讲卸载mysql.因为我乱撞乱试后没法恢复了就卸载了.而且卸载过程也遇到了问题.估计是没卸载完全,导致后续没办法安装.讲下我的操作过程如何彻底卸载mysql.# 开始卸载,这条卸载命令运行应该没问题sudo apt-get autoremove --purge mysql-server# 这条命令我不记得..." }, { "title": "学习数据结构后的一些理解和想法总结", "url": "/posts/learn-data-structures-summary/", "categories": "Learning", "tags": "Data Structure", "date": "2020-06-27 00:00:00 +0800", "snippet": "  最近归零后重新学习的数据结构,根据同事推荐的某老师的数据结构视频学习后有总醍醐灌顶的感觉.总结学习后一些理解和想法.(注: 老师是用java实现的一些,目的是了解原理,而不是实现java里面的一些数据结构)数组  对于最常用的数据结构之一的动态数组来说.基于其还是实现了栈还有队列以及循环队列.  动态数组原理其实很简单,让我唯一觉得有意思的是它的重新分配容量的机制.需要扩容的时候,很明显这个时候的扩容条件就是,当前元素个数 == 容量.这个时候就扩容为原来的两倍.而在缩小容量的时候,选择的时机的却是 当前元素个数 / 4 == 容量的时候.一开始我还在困惑,为什么要选择是当前元素个数..." }, { "title": "存储过程入参默认值问题", "url": "/posts/work-problem-SQL-1/", "categories": "Issue", "tags": "SQL Server, Transact-SQL", "date": "2020-06-23 00:00:00 +0800", "snippet": "  简单记录下一个因为存储过程默认值问题导致浪费时间在一段没问题的存储过程中找问题的事情.问题出现  因为一个表数据不对,所以开始排除问题,最终定位到某个存储过程.于是在一系列的测试过后,终于找到了问题.定位问题和不停的调试存储过程排除了一个个问题.最终发现了一个地方有问题,到这里感觉已经99%找到问题了,一切似乎都很顺利,但是我改完后运行下存储过程看看最终效果的时候,就是数据还是不对.这我就纳闷了啊,因为部分数据不对,部分数据是正确的啊(最后发现原因是因为在测试过程中,修改了部分数据,而这部分修改后的数据是正确的).这个时候难免不怀疑自己.于是在这个正确的存储过程中,继续找问题.解决方..." }, { "title": "使用frp实现windows远程桌面连接", "url": "/posts/frp-windows-remote/", "categories": "Tools, Tutorial", "tags": "FRP", "date": "2020-06-09 00:00:00 +0800", "snippet": "  公司不允许安装非授权的软件,所以迫于无奈,只能放弃teamviewer这些远程软件,只能使用window自带的远程桌面.网上结合了N个教程后,踩坑并汇总出来的傻瓜式教程.1.下载frps  下载地址 https://github.com/fatedier/frp/releases服务器自己查看自己的系统是32位的还是64位的.我的是64位的ubuntu所以下载了frp_0.33.0_linux_amd64.tar.gz客户端就是我们自己的电脑就下载frp_0.33.0_windows_amd64.zip2.配置服务器端: frp_0.33.0_linux_amd64.tar.gz 解..." }, { "title": "发布项目到服务器-2", "url": "/posts/publis-project-to-service-2/", "categories": "Issue", "tags": "HUAWEI Cloud, Nginx", "date": "2020-06-07 00:00:00 +0800", "snippet": "  解决了 昨天的问题,成功把项目发布到了80端口,可是发现进来默认是我第一个玩具项目,于是尝试把项目切换到一个新端口上,可是问题又出现了.问题出现  和前一样要把项目发布到特定的端口上,就需要配置nginx.很快找到了发布项目到服务器上的 参考资料 然后,根据教程做完后(我设置是是发布的到8000端口),访问服务器ip:8000.发现并没有用.页面返回’无法访问此网站,服务器响应时间过长’.当时看到这不是和昨天一个情况吗.果断在在华为云控制台的访问控制中把8000端口加上.然后刷新页面,结果还是没用.因为把项目发布到80端口能正常访问,但是发布到8000端口不能访问,首先排除项目代码的..." }, { "title": "发布项目到服务器-1", "url": "/posts/publis-project-to-service-1/", "categories": "Issue", "tags": "HUAWEI Cloud", "date": "2020-06-06 00:00:00 +0800", "snippet": "  趁着今年6.18从活动上车了华为云,满怀欣喜的想要大干一场—把自己项目发布到服务器上去.万万没想到第一步访问自己服务器都出现了问题.问题出现  今天刚买服务器,想着赶紧吧自己的玩具项目发布上去.然后果断打开远程工具连接上了服务器根据安装nginx的教程 装好了ngnix.安装完毕后急不可耐的想要试试效果,然后发现根据教程走下来到了最后一步验证的时候.发现我并不能显示教程中的welcome to nginx页面.很郁闷,明明啥都根据教程来的可是最后并没有得到想要的结果.遇到这种离奇问题的确很难受.明明觉得什么都正确但是结果就是不对.解决方案  想了半天,先ping 下服务器再说,更郁闷..." }, { "title": "第一年的工作经历和想法(2019-2020)", "url": "/posts/my-2019-experience-and-thinking/", "categories": "Summary", "tags": "Summary", "date": "2020-05-13 00:00:00 +0800", "snippet": "2019-04-01 实习在于武汉某家总部位于福州的传统金融IT企业2019-07-01 毕业于武汉一所双非大学 与此同时正式入职实习公司2020-03-11 离职,我为什么离职呢?主要是三个原因:  一.疫情原因,家人不想让我回武汉.  二.因为大学认识的一位学霸大佬在上海,目前达到他那个水平是我的第一个目标.  三.个人原因.入职了公司后发现,团队的人都很年轻,除了组长,都是工作一两年的人,以及我这个应届生.而且公司的代码管理是真的混乱,每个人写完代码后都是直接提交到仓库,完全没有code review,没有单元测试,测试只有一个.实际上测试还负责测试手机端系统.  基本可以说测试全..." }, { "title": "项目踩坑-1", "url": "/posts/project-problem-dva-1/", "categories": "Issue", "tags": "Dva.js", "date": "2019-10-11 00:00:00 +0800", "snippet": "  负责的一个项目已经部署到客户的生产环境上测试了,接踵而来的是一系列的问题.这也算预料之中,无非是一些环境问题之类的.但是有一个问题缺花了一天的时间来定位和解决.问题出现  客户那边现场的同事反馈说,有一个页面没数据.当时我一想肯定是后端接口因为什么环境问题报错,在客户的测试环境和我的本地环境都没啥问题.肯定不是前端的问题,果断把问题转给了后端同事.  一个小时后,后端同事排查发现,他们说没啥问题,环境也没问题,接口返回都是200,没报错,而且数据库的数据也是有的.看他说得这么笃定,而且也是工作经验2年的老员工了,他的判断应该没问题.不过我还是抱有一丝怀疑态度,就找客户现场同事复现了下..." }, { "title": "常用正则", "url": "/posts/regex-dictionary/", "categories": "Technology", "tags": "Regex", "date": "2019-07-02 00:00:00 +0800", "snippet": "记录下工作中用到的或者其他常用的正则// =&amp;gt; reg(正则表达式), value(需要检测的值)/reg/.test(value)// 获取字符串中的数字存入数组/\\d+/g // 整个字符串是存数字^\\d+$// 获取字符串中的数字部分const num = value.replace(/[^0-9]/ig, &#39;&#39;);// 获取字符串中的字母部分const word = value.replace(/[^a-z]+/ig, &#39;&#39;); // 匹配介于${ 和 } 直接的字符串, AAA是开始位置 BBB是结束位置 匹配介于AAA和BBB之间..." } ]
